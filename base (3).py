# -*- coding: utf-8 -*-
"""Base

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e7DTXD4CHZGfl2qCADr1XSy-iu2O7_mA
"""

import pandas as pd
import numpy as np
from pandas import ExcelWriter 
import pandas as pd
import streamlit as st
import base64
from io import BytesIO
st.header("Energy Distribution Simulation")
uploaded_file = st.file_uploader("Choose an Excel file", type=["xlsx", "xls"])
if uploaded_file is not None:
    try:
        df = pd.read_excel(uploaded_file)
        st.success("File uploaded and read successfully.")
        # Perform any operations on the DataFrame here
    except Exception as e:
        st.error(f"Error while reading the file: {e}")
else:
    st.warning("No file uploaded.")

    
option = st.selectbox(
    'Which System would you like to choose?',
    ('MVAC', 'LVAC', 'DC-DC'))

if option=="MVAC":
    df6=df
    df=df[1:]
    df
    df.reset_index(inplace=True)
    
    treff = st.number_input('Insert Battery Transformer Efficiency',min_value=0.000, max_value=1.000, value=0.99)
    inveff = st.number_input('Insert Battery Invertor Efficiency',min_value=0.000, max_value=1.000, value=0.984)
    treff1 = st.number_input('Insert Solar Transformer Efficiency',min_value=0.000, max_value=1.000, value=0.99)
    inveff1 = st.number_input('Insert Solar Invertor Efficiency',min_value=0.000, max_value=1.000, value=0.984)
    cheff = st.number_input('Insert Charging Efficiency',min_value=0.000, max_value=1.000, value=0.96)
    diseff = st.number_input('Insert Discharging Efficiency',min_value=0.000, max_value=1.000, value=0.94)

    # treff = st.slider('Transformer Efficiency', 0.00, 1.00, 0.99)
    # inveff= st.slider('Invertor Efficiency', 0.00, 1.00, 0.984)
    # cheff= st.slider('Charging Efficiency', 0.00, 1.00, 0.96)
    # diseff= st.slider('Discharging Efficiency', 0.00, 1.00, 0.94)

    k=1
    def calc(df,bs,sg,ini,yr):


      battery_storage=ini

      df['EArray']=df['EArray']*sg
      energy_wasted=[]
      ini=[]
      rtc=[]
      chdis=[]
      l=[]
      p=[]
      cl=[]
      mf=1
      for i in range(len(df)):
        if df['EArray'][i]>4.4:
          p.append(4.4*inveff1*treff1)
          l.append(df['EArray'][i]-4.4)
        else:
          p.append(df['EArray'][i]*inveff*treff)
          l.append(0)
        cl.append(df['RTC'][i])
      df['Clipping Energy']=l
      df['Power transmitted by inverter and transformer']=p
      df['Power transmitted by inverter and transformer']=df['Power transmitted by inverter and transformer']*4
      for i in range(len(df)):
        if df['EArray'][i]==0:
          battery_storage1=battery_storage

          if battery_storage<=0.02*bs:
            chdis.append("Not Enough Power in Battery")
            rtc.append(0)
          if battery_storage>0.02*bs:
            if battery_storage - 0.02*bs>=df['RTC'][i]/diseff/treff/inveff:
              battery_storage1=battery_storage1-df['RTC'][i]/diseff/treff/inveff
              rtc.append(df['RTC'][i])
            if (battery_storage - 0.02*bs)<df['RTC'][i]/diseff/treff/inveff:
              battery_storage1=0.02*bs
              rtc.append((battery_storage-0.02*bs)*diseff*inveff*treff)
            chdis.append("Discharging")


          battery_storage=battery_storage1
          ini.append(battery_storage)
          energy_wasted.append(0)

        if df['EArray'][i]>0:
          # battery_storage=battery_storage+df['Power transmitted by inverter and transformer'][i]*cheff*treff
          battery_storage1=battery_storage
          if df['Power transmitted by inverter and transformer'][i]+battery_storage>df['RTC'][i]:
            if df['Power transmitted by inverter and transformer'][i]>df['RTC'][i]:
              if battery_storage+(df['RTC'][i]-df['Power transmitted by inverter and transformer'][i])*cheff*inveff*treff>=bs:
                rtc.append(df['Power transmitted by inverter and transformer'][i]-(bs-battery_storage)/cheff/inveff/treff)
                chdis.append("Charging")
              else:
                battery_storage1=battery_storage-((df['RTC'][i]-df['Power transmitted by inverter and transformer'][i]))*cheff*inveff*treff
                chdis.append("Charging")
                rtc.append(df['RTC'][i])
            if df['Power transmitted by inverter and transformer'][i]<df['RTC'][i]:
              if battery_storage-(df['RTC'][i]-df['Power transmitted by inverter and transformer'][i])/diseff/treff/inveff>0.02*bs:
                battery_storage1=battery_storage-(df['RTC'][i]-df['Power transmitted by inverter and transformer'][i])/diseff/treff/inveff
                chdis.append("Discharging")
                rtc.append(df['RTC'][i])
              else:
                battery_storage1=0.02*bs
                chdis.append("Discharging")
                rtc.append((battery_storage-0.02*bs)*diseff*inveff*treff)
          if df['Power transmitted by inverter and transformer'][i]+battery_storage<=df['RTC'][i]:
            rtc.append(df['Power transmitted by inverter and transformer'][i]+(battery_storage-0.02*bs)*diseff*inveff*treff)
            battery_storage1=0.02*bs
            chdis.append("Discharging")
          battery_storage=battery_storage1
          if battery_storage>=bs:
            energy_wasted.append(battery_storage-bs)
            battery_storage=bs
            ini.append(bs)

          if battery_storage<bs:
            energy_wasted.append(0)
            ini.append(battery_storage)

      df['Final Power Remained in the Battery']=ini
      df['Initial Power in the battery'] = df['Final Power Remained in the Battery'].shift(1)
      df.loc[0, 'Initial Power in the battery'] = df['Final Power Remained in the Battery'][0]+rtc[0]/treff/inveff/diseff
      # df.loc[0, 'Initial Power in the battery'] = bs
      df['Charging State']=chdis
      # del df['']
      df['Power lost due to battery storage limit']=energy_wasted
      df['RTC output']=rtc
      for i in range(len(df)):
        if df['Power lost due to battery storage limit'][i]>0 and df['Initial Power in the battery'][i]==bs and df['Final Power Remained in the Battery'][i]==bs:
          # df['RTC output'][i]=df['RTC output'][i]+df['Power lost due to battery storage limit'][i]
          # df['RTC output'][i]=df['Power transmitted by inverter and transformer'][i]
          df['Power lost due to battery storage limit'][i]=df['Power transmitted by inverter and transformer'][i]-df['RTC'][i]
        if df['Power lost due to battery storage limit'][i]>0 and df['Initial Power in the battery'][i]!=bs and df['Final Power Remained in the Battery'][i]==bs:
          # df['RTC output'][i]=df['Power transmitted by inverter and transformer'][i]-(df['Final Power Remained in the Battery'][i]-df['Initial Power in the battery'][i])/inveff/cheff/treff
          df['Power lost due to battery storage limit'][i]=df['Power transmitted by inverter and transformer'][i]-(bs-df['Initial Power in the battery'][i])/cheff/inveff/treff-df['RTC'][i]
      # df['RTC output']=df['RTC output']+df['Power lost due to battery storage limit']
      # df['Power lost due to battery storage limit']=0
      sr=[]
      br=[]
      for i in range(len(df)):
        if df['Power transmitted by inverter and transformer'][i]==0:
          sr.append(0)
          br.append(df['RTC output'][i])
        if df['Power transmitted by inverter and transformer'][i]>0 and df['Charging State'][i]=="Discharging":
          sr.append(df['Power transmitted by inverter and transformer'][i])
          br.append(df['RTC'][i]-df['Power transmitted by inverter and transformer'][i])
        if df['Power transmitted by inverter and transformer'][i]>0 and df['Charging State'][i]=="Charging":
          sr.append(df['RTC'][i])
          br.append(0)
      for i in range(len(df)):
        if df['RTC output'][i]==0:
          sr[i]=0
          br[i]=0
        if df['Charging State'][i]=="Discharging":
          if df['RTC'][i]!=df['RTC output'][i]:
            br[i]=df['RTC output'][i]
        if df['Charging State'][i]=="Not Enough Power in Battery":
          sr[i]=0
          br[i]=0
        if df['Charging State'][i]=="Discharging" and df['Power transmitted by inverter and transformer'][i]>0 and df['Initial Power in the battery'][i]==0.02*bs and df['Final Power Remained in the Battery'][i]==0.02*bs:
          sr[i]=df['RTC output'][i]
          br[i]=0

      df['RTC contribution from Solar Generation']=sr
      df['RTC contribution from Battery']=br
      return df
        

    import pandas as pd
    df4=df
    start_date = "1990-01-01 00:00:00"
    end_date = "1990-12-31 23:00:00"
    df=df6
    y=1
    fd=[]
    for i in range(25):
      df = pd.DataFrame(df, index=pd.date_range(start=start_date, end=end_date, freq="H"))
      new_dates = pd.date_range(start=start_date, end=end_date, freq="H") + pd.DateOffset(years=i)
      new_df = df.reindex(index=new_dates, method="ffill")
      new_df['EArray']=df['EArray']
      y=y+1
      fd.append(new_df)
    yridx=[]
    for i in range(len(fd)):
      dfx=pd.DataFrame()
      dfx['Date']=fd[i].index
      yridx.append(dfx['Date'])

    def yrdeg(n):
      return 0.02*n*n-2.02*n+94.08

    yrdeg(14)

    df4['Year'] = pd.to_datetime(df4['Date'], format='%Y')

    dfs_by_year = [group for _, group in df4.groupby(df4['Year'].dt.year)]
    del df4['Year']
    writer = ExcelWriter('output.xlsx')
    bk=0

    for df_year in range(1):

      print(df_year)
      if df_year==0:
        # df1=calc(df4[:8761],59.52,1)
        df1=calc(df4[:8761],59.52,1,59.52,df_year+1)
        df1['Date']=yridx[df_year]
        df1.to_excel(writer,f'Year {df_year+1}')
        bk=float(df1['Final Power Remained in the Battery'].tail(1))
        # print(bk)
      if df_year==1:
        df2=calc(df4[:8761],59.52*0.95,1*0.975,bk,df_year+1)
        df2['Date']=yridx[df_year]
        df2.to_excel(writer,f'Year {df_year+1}')
        bk=float(df2['Final Power Remained in the Battery'].tail(1))
        # print(bk)
      if df_year>1:
        df3=calc(df4[:8761],59.52*0.95*(pow(0.975,(df_year-1))),1*0.98*(pow(treff75,(df_year-1))),bk,df_year+1)
        df3['Date']=yridx[df_year]
        df3.to_excel(writer,f'Year {df_year+1}')
        bk=float(df3['Final Power Remained in the Battery'].tail(1))

    import base64
    solar_contribution=[]
    battery_contribution=[]
    for i in range(len(df1)):
        if df1['Power transmitted by inverter and transformer'][i]==0:
            battery_contribution.append(df1['RTC output'][i])
            solar_contribution.append(0)

        if df1['Power transmitted by inverter and transformer'][i]>0:  
            if df1['Power transmitted by inverter and transformer'][i]>=df1['RTC output'][i]:
                solar_contribution.append(df1['RTC output'][i])
                battery_contribution.append(0)

            if df1['Power transmitted by inverter and transformer'][i]<df1['RTC output'][i]:
                solar_contribution.append(df1['Power transmitted by inverter and transformer'][i])
                if (df1['Initial Power in the battery'][i]-0.02*59.52) >=(df1['RTC output'][i]-(df1['Power transmitted by inverter and transformer'][i])):
                    battery_contribution.append(df1['RTC output'][i]-df1['Power transmitted by inverter and transformer'][i])
                else:
                    battery_contribution.append(df1['Initial Power in the battery'][i]-0.02*59.52)

    df1['Solar contribution in RTC']=solar_contribution
    df1['Battery contribution in RTC']=battery_contribution
    st.subheader("Percentage RTC Provided")
    st.write(sum(df1['RTC output'])/sum(df1['RTC'])*100)
    st.subheader("Percent Clipping Loss")
    st.write(sum(df1['Clipping Energy'])/sum(df1['EArray'])*100)
    st.subheader("Curtailment")
    st.write(sum(df1['Power lost due to battery storage limit']))
    st.subheader("Curtailment loss in percent")
    st.write(sum(df1['Power lost due to battery storage limit'])/sum(df1['Power transmitted by inverter and transformer'])*100)
    st.subheader("Total Solar Contribution to RTC")
    st.write( sum(df1['Solar contribution in RTC']))
    st.subheader("Total Battery Contribution to RTC")
    st.write( sum(df1['Battery contribution in RTC']))
    st.subheader("Solar Contribution to RTC in percentage")
    st.write(sum(df1['Solar contribution in RTC'])/sum(df1['RTC output'])*100)
    st.subheader("Battery Contribution to RTC in percentage")
    st.write(sum(df1['Battery contribution in RTC'])/sum(df1['RTC output'])*100)
    def download_dataframe(df):
        csv = df.to_csv(index=False)
        b64 = base64.b64encode(csv.encode()).decode()
        href = f'<a href="data:file/csv;base64,{b64}" download="data.csv">Download Energy Distribution File</a>'
        return href
    df1
    st.markdown(download_dataframe(df1), unsafe_allow_html=True)
    
if option=="LVAC":
    
    df6=df
    df['RTC Req']=df['RTC']
    del df['RTC']
    df=df[1:]
    df
    df.reset_index(inplace=True)
    
    # treff = st.slider('Transformer Efficiency', 0.00, 1.00, 0.99)
    # inveff= st.slider('Invertor Efficiency', 0.00, 1.00, 0.984)
    # cheff= st.slider('Charging Efficiency', 0.00, 1.00, 0.96)
    # diseff= st.slider('Discharging Efficiency', 0.00, 1.00, 0.94)

    treff = st.number_input('Insert Battery Transformer Efficiency',min_value=0.000, max_value=1.000, value=0.99)
    inveff = st.number_input('Insert Battery Invertor Efficiency',min_value=0.000, max_value=1.000, value=0.984)
    # treff1 = st.number_input('Insert Solar Transformer Efficiency',min_value=0.000, max_value=1.000, value=0.99)
    # inveff1 = st.number_input('Insert Solar Invertor Efficiency',min_value=0.000, max_value=1.000, value=0.984)
    cheff = st.number_input('Insert Charging Efficiency',min_value=0.000, max_value=1.000, value=0.96)
    diseff = st.number_input('Insert Discharging Efficiency',min_value=0.000, max_value=1.000, value=0.94)


    l=[]
    p=[]
    cl=[]   # constant laod
    for i in range(len(df)):
      if df['EArray'][i]>4.4:
        p.append(4.4*inveff)
        l.append(df['EArray'][i]-4.4)
      else:
        p.append(df['EArray'][i]*inveff)   # why treff??
        l.append(0)
      cl.append(4.4)
    df['Clipping Energy']=l
    df['Power transmitted by inverter and transformer']=p
    df['Power transmitted by inverter and transformer']=df['Power transmitted by inverter and transformer']*4
    be=[]
    inve=[]
    battery_storage=59.52
    energy_wasted=[]
    ini=[]
    rtc=[]
    chdis=[]
    for i in range(len(df)):
      # dif=df['Date'][0].year-first
      if df['EArray'][i]==0:
        battery_storage1=battery_storage
        if battery_storage<=0.02*59.52:
          # battery_storage1
          chdis.append("Not Enough Power in Battery")
          rtc.append(0)
          be.append(0)
          inve.append(0)
        if battery_storage>0.02*59.52:
          if battery_storage - 0.02*59.52>=4.4/diseff/treff/inveff:  # when battery has enough supply
            battery_storage1=battery_storage1-4.4/diseff/treff/inveff
            rtc.append(4.4)
            inve.append(0)
            be.append(4.4)
          if (battery_storage - 0.02*59.52)<4.4/diseff/treff/inveff:  #wehn battery doesnt have enough 
            battery_storage1=0.02*59.52
            rtc.append(battery_storage-0.02*59.52)
            inve.append(0)
            be.append(battery_storage-0.02*59.52)
          chdis.append("Discharging")

        battery_storage=battery_storage1
        ini.append(battery_storage)
        energy_wasted.append(0)

      if df['EArray'][i]>0:
        # battery_storage=battery_storage+df['Power transmitted by inverter and transformer'][i]*0.96*treff
        battery_storage1=battery_storage
        if df['Power transmitted by inverter and transformer'][i]+battery_storage>4.4:
          if df['Power transmitted by inverter and transformer'][i]>4.4:
            battery_storage1=battery_storage+((df['Power transmitted by inverter and transformer'][i])-4.4/treff)*cheff*inveff
            chdis.append("Charging")
            inve.append(4.4)
            be.append(0)
          if df['Power transmitted by inverter and transformer'][i]<4.4:
            battery_storage1=battery_storage-(4.4/treff-df['Power transmitted by inverter and transformer'][i])/diseff/inveff
            chdis.append("Discharging")
            inve.append(df['Power transmitted by inverter and transformer'][i])
            be.append((4.4-df['Power transmitted by inverter and transformer'][i]))
          rtc.append(4.4)
        if df['Power transmitted by inverter and transformer'][i]+battery_storage<=4.4:
          be.append(battery_storage-0.02*59.52)
          inve.append(df['Power transmitted by inverter and transformer'][i])
          rtc.append(df['Power transmitted by inverter and transformer'][i]+battery_storage-0.02*59.52)
          chdis.append("Discharging")
        battery_storage=battery_storage1
        if battery_storage>=59.52:
          energy_wasted.append(battery_storage-59.52)
          battery_storage=59.52
          ini.append(59.52)

        if battery_storage<59.52:
          energy_wasted.append(0)
          ini.append(battery_storage)

    df['Final Power Remained in the Battery']=ini
    df['Initial Power in the battery'] = df['Final Power Remained in the Battery'].shift(1)
    df.loc[0, 'Initial Power in the battery'] = 59.52
    df['Charging State']=chdis
    df['Power lost due to battery storage limit']=energy_wasted
    df['RTC']=rtc
    df['battery_energy']=be
    df['inverter_energy']=inve
      # return df
      # return df
    st.subheader("Percentage RTC Provided")
    st.write(sum(df['RTC'])/4.4/len(df)*100)
    st.subheader("Percent Clipping Loss")
    st.write(sum(df['Clipping Energy'])/sum(df['EArray'])*100)
    st.subheader("Curtailment")
    st.write(sum(df['Power lost due to battery storage limit']))
    st.subheader("Curtailment loss in percent")
    st.write(sum(df['Power lost due to battery storage limit'])/sum(df['Power transmitted by inverter and transformer'])*100)
    st.subheader("Total Solar Contribution to RTC")
    st.write( sum(df['inverter_energy']))
    st.subheader("Total Battery Contribution to RTC")
    st.write( sum(df['battery_energy']))
    st.subheader("Solar Contribution to RTC in percentage")
    st.write(sum(df['inverter_energy'])/sum(df['RTC']))
    st.subheader("Battery Contribution to RTC in percentage")
    st.write(sum(df['battery_energy'])/sum(df['RTC']))
    import base64
    df
    def download_dataframe(df):
        csv = df.to_csv(index=False)
        b64 = base64.b64encode(csv.encode()).decode()
        href = f'<a href="data:file/csv;base64,{b64}" download="data.csv">Download Energy Distribution File</a>'
        return href

    st.markdown(download_dataframe(df), unsafe_allow_html=True)

if option=="DC-DC":
    import pandas as pd
    import numpy as np
#     df=pd.read_excel('base_cond_updated1.xlsx')
    from decimal import Decimal
    from datetime import time

    df

    df=df[1:]
    # try:
    # if df['EArray.1][0]:
    #     del df['EArray']
    if max(df['EArray'])<100:
        # del df['EArray']
        df.rename(columns = {'EArray':'EArray.1'}, inplace = True)
        
    # df['EArray.1']=df['EArray']
    df.reset_index(inplace=True)
    
    df=df.round({'EArray.1':9})
    # del df['EArray.1']
    #df['Curtailement']
    # del df['Battery Charge & Discharge energy'] 
    # del df['GlobHor']
    # del df['Battery Energy']
    # del df['RTC output']
    # df['RTC']=df['RTC Required']
    df=df.round({'RTC':9})
    

    battery=7.44
    rtc=[]
    bat=[]
    #curt=[]
    energy_wasted=[]
    battery_contribution=[]
    solar_contribution=[]

    # trans_efficiency = st.slider('Transformer Efficiency', 0.00, 1.00, 0.99)
    # inverter_efficiency= st.slider('Invertor Efficiency', 0.00, 1.00, 0.984)
    # ch_efficiency= st.slider('Charging Efficiency', 0.00, 1.00, 0.96)
    # dis_efficiency= st.slider('Discharging Efficiency', 0.00, 1.00, 0.94)
    # dc_converter= st.slider('DC converter Efficiency', 0.00, 1.00, 0.984)

    trans_efficiency = st.number_input('Insert Battery Transformer Efficiency',min_value=0.000, max_value=1.000, value=0.99)
    inverter_efficiency = st.number_input('Insert Battery Invertor Efficiency',min_value=0.000, max_value=1.000, value=0.984)
    # treff1 = st.number_input('Insert Solar Transformer Efficiency',min_value=0.000, max_value=1.000, value=0.99)
    # inveff1 = st.number_input('Insert Solar Invertor Efficiency',min_value=0.000, max_value=1.000, value=0.984)
    ch_efficiency = st.number_input('Insert Charging Efficiency',min_value=0.000, max_value=1.000, value=0.96)
    dis_efficiency = st.number_input('Insert Discharging Efficiency',min_value=0.000, max_value=1.000, value=0.94)
    dc_converter = st.number_input('Insert DC Converter Efficiency',min_value=0.000, max_value=1.000, value=0.984)
    #     inverter_efficiency = 0.984
#     # float(input("Enter inverter efficiency:"))
#     trans_efficiency= 0.99
#     # float(input("Enter transformer efficiency:"))
#     ch_efficiency = 0.96
#     # t(input("Enter battery charging efficiency:"))
#     dis_efficiency=0.94
#     # t(input("Enter battery discharging efficiency:"))
#     dc_converter= 0.984
#     # input("Enter dc-dc converter efficiency:"))


    for i in range(len(df)):
      battery1=battery

      if df['EArray.1'][i]==0:
            if (battery-0.02*14.88)>=df['RTC'][i]/inverter_efficiency/trans_efficiency/dc_converter/dis_efficiency:
              battery1=battery1-(df['RTC'][i])/inverter_efficiency/dc_converter/dis_efficiency/trans_efficiency
              rtc.append(df['RTC'][i])
              energy_wasted.append(0)
            if (battery-0.02*14.88)<df['RTC'][i]/dis_efficiency/inverter_efficiency/dc_converter/trans_efficiency:
              rtc.append((battery-0.02*14.88)*inverter_efficiency*dc_converter*dis_efficiency*trans_efficiency)
              battery1=0.02*14.88
              energy_wasted.append(0)
        #curt.append(0)

      if df['EArray.1'][i]>0:
            if df['EArray.1'][i] < df['RTC'][i]/inverter_efficiency/trans_efficiency:
              if (battery-0.02*14.88) >=(df['RTC'][i]/inverter_efficiency/trans_efficiency-float(df['EArray.1'][i]))/dis_efficiency/dc_converter:
                battery1=battery1-(df['RTC'][i]/inverter_efficiency/trans_efficiency-float(df['EArray.1'][i]))/dis_efficiency/dc_converter/inverter_efficiency/trans_efficiency
        #         if battery
                rtc.append(df['RTC'][i])
                energy_wasted.append(0)
              if (battery-0.02*14.88)<(df['RTC'][i]/inverter_efficiency/trans_efficiency-float(df['EArray.1'][i]))/dis_efficiency/dc_converter:
                rtc.append(((battery-0.02*14.88)*dc_converter*dis_efficiency+float(df['EArray.1'][i]))*inverter_efficiency*trans_efficiency)
                battery1=14.88*0.02
                energy_wasted.append(0)
              #curt.append(0)
            if df['EArray.1'][i]>=df['RTC'][i]/inverter_efficiency/trans_efficiency:
              battery1=battery1+(float(df['EArray.1'][i])-df['RTC'][i]/inverter_efficiency/trans_efficiency)*ch_efficiency*dc_converter
              if battery1 >= 14.88:
                energy_wasted.append(battery1-14.88)
                battery1=14.88
                rtc.append(df['RTC'][i] + (battery1-14.88))
        #         energy_wasted.append(0)
              else:
                energy_wasted.append(0)
                rtc.append(df['RTC'][i])
                #curt.append(0)

            if df['RTC'][i]>=3.125:
                rtc.append(3.125)
                #df['RTC'][i]=3.125
                energy_wasted.append(df['RTC'][i]-3.125)


      battery=battery1
      bat.append(battery)
    #   curt.append(energy_wasted)


    df['Curtailement']=energy_wasted
    df['Current power in battery']=bat
    df=df.round({'Current power in battery':9})

    rtc = rtc[:len(df.index)]

    df['RTC']=rtc
    df['Initial Power in the battery'] = df['Current power in battery'].shift(1)
    df.loc[0, 'Initial Power in the battery'] = 7.44

    for i in range(len(df)):
        if df['EArray.1'][i]==0:
            battery_contribution.append(df['RTC'][i])
            solar_contribution.append(0)

        if df['EArray.1'][i]>0:  
            if df['EArray.1'][i]>=df['RTC'][i]:
                solar_contribution.append(df['RTC'][i])
                battery_contribution.append(0)

            if df['EArray.1'][i]<df['RTC'][i]:
                solar_contribution.append(df['EArray.1'][i])
                if (df['Initial Power in the battery'][i]-0.02*14.88) >=(df['RTC'][i]-(df['EArray.1'][i])):
                    battery_contribution.append(df['RTC'][i]-df['EArray.1'][i])
                else:
                    battery_contribution.append(df['Initial Power in the battery'][i]-0.02*14.88)

    df['Solar contribution in RTC']=solar_contribution
    df['Battery contribution in RTC']=battery_contribution
    df
    st.subheader("Percentage RTC Provided")
    st.write(sum(df['RTC'])/sum(df['RTC Required'])*100)
    st.subheader("Total Curtailment")
    st.write(sum(df['Curtailement']))
    st.subheader("Curtailment loss in percent")
    st.write(sum(df['Curtailement'])/sum(df['EArray.1'])*100)
    st.subheader("Total Solar Contribution to RTC")
    st.write( sum(df['Solar contribution in RTC']))
    st.subheader("Total Battery Contribution to RTC", sum(df['Battery contribution in RTC']))
    st.write( sum(df['Battery contribution in RTC']))
    st.subheader("Solar Contribution to RTC in percentage")
    st.write(sum(df['Solar contribution in RTC'])/sum(df['RTC']))
    st.subheader("Battery Contribution to RTC in percentage")
    st.write(sum(df['Battery contribution in RTC'])/sum(df['RTC']))
    def download_dataframe(df):
        csv = df.to_csv(index=False)
        b64 = base64.b64encode(csv.encode()).decode()
        href = f'<a href="data:file/csv;base64,{b64}" download="data.csv">Download Energy Distribution File</a>'
        return href

    st.markdown(download_dataframe(df), unsafe_allow_html=True)
